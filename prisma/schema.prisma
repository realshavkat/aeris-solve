datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  name              String?   // nom Discord
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  rpName            String?
  anonymousNickname String?
  discordUsername   String?
  status            String    @default("needs_registration")
  role              String    @default("pending")
  accounts          Account[]
  sessions          Session[]
  folderAccess      FolderUsers[]
  reportEditors     ReportEditors[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Folder {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  image       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  reports     Report[]
  users       FolderUsers[]
}

model FolderUsers {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  folderId String @db.ObjectId
  userId   String @db.ObjectId
  folder   Folder @relation(fields: [folderId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([folderId, userId])
}

model Report {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String?
  folder    Folder          @relation(fields: [folderId], references: [id])
  folderId  String          @db.ObjectId
  backups   Backup[]
  editors   ReportEditors[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model ReportEditors {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  reportId String @db.ObjectId
  userId   String @db.ObjectId
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([reportId, userId])
}

model Backup {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  report    Report   @relation(fields: [reportId], references: [id])
  reportId  String   @db.ObjectId
  createdAt DateTime @default(now())
}
